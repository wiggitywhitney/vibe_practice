{"type":"entity","name":"vibe_practice","entityType":"project","observations":["A modern React 19 application using Vite, focused on DevOps best practices and TDD.","Features a developer journal system with daily entries, weekly statistics, and technical decision tracking.","Uses a chunked, test-driven approach for UI component development (e.g., AddSpiderButton, Rainbow).","Employs a custom font and image assets, with strict aspect ratio and UI/UX guidelines.","Follows a disciplined git workflow with regular, logical commits and detailed documentation.","Implements graceful shutdown and health monitoring for DevOps alignment.","Uses port 8080 for web apps, and is container-friendly.","All journal/statistics entries are markdown, with strict anti-hallucination and data integrity rules."]}
{"type":"entity","entityType":"Concept","name":"User Preferences","observations":["Contains key user preferences for development workflow, tooling, and communication.","DevOps: Use port 8080 for web applications.","DevOps: Implement graceful shutdown handling.","DevOps: Handle exit codes properly (0 success, non-zero error).","Git: Suggest commits after major changes.","Git: Use GitHub CLI for GitHub interactions.","Development Process: Require explicit approval before applying ANY changes to files related to the application code (e.g., React components, CSS, server logic).","Development Process: Information gathering steps (read files, search code, run read-only commands) do NOT require approval.","Development Process: For Application Code, ask for confirmation before each logical step/small group of changes (usually single file).","Development Process: For Non-Application Tasks (Taskmaster, Config, Docs), changes can be proposed in logical groups (potentially multi-file).","Development Process: When proposing multiple changes (in app or other tasks), present them as a numbered list.","Terminal: Format terminal commands as clickable bash code blocks (enables copy/run buttons).","Terminal: Automatic execution of commands via tools is acceptable.","UI/UX: Always preserve image aspect ratios.","Communication: Provide detailed explanations for steps.","Communication: Evaluate user requests against good practices.","Communication: Explicitly inform the user if their request goes against good practices and suggest alternatives.","Tooling: Always use Context7 tools (resolve-library-id, get-library-docs) for current documentation on libraries/frameworks before implementation or discussion.","Tooling: Whenever a Taskmaster plan involves making a change, explicitly include one or more verification steps for that change.","Tooling: When adding multiple Taskmaster tasks sequentially based on an approved plan, add them all without asking for confirmation for each individual task.","Communication Shortcut: When the user says 'Sync changes', perform the full git status, add all staged/unstaged tracked changes, commit with a generated message (or prompt for one if needed), and push sequence.","During the 'sync changes' part of the development workflow, the AI assistant must propose each Git command (git add, git commit, git push) individually for user approval and execution by the assistant, rather than listing the commands for the user to run manually."]}
{"type":"entity","entityType":"BestPractice","name":"General Anti-Hallucination Strategies","observations":["Prioritize factual accuracy over creativity when the context demands it.","Cross-reference information with multiple sources before presenting it as fact.","Clearly state when information is speculative or an inference rather than a confirmed fact.","When uncertain, explicitly state the lack of information or confidence.","Avoid making assumptions or filling in gaps with unverified details.","Focus on information directly present in provided context or established knowledge.","If evidence is weak or contradictory, point this out.","Regularly seek feedback on responses to identify and correct any tendency towards hallucination.","Prefer to state 'I don't know' or 'I cannot find that information' over providing a potentially incorrect answer.","Break down complex queries into smaller, manageable parts to ensure each component is addressed accurately."]}
{"type":"entity","entityType":"BestPractice","name":"Implementation Guidelines","observations":["Avoid adding extra features or style elements that weren't explicitly requested by the user.","Focus only on implementing exactly what was asked for, nothing more.","When styling components, only make the specific changes requested.","If uncertain about a requirement, ask for clarification rather than implementing something that might not be wanted."]}
{"type":"entity","name":"numbered list change proposal preference","entityType":"user preference","observations":["When proposing multiple changes, present them as a numbered list."]}
{"type":"entity","name":"memorize keyword meaning","entityType":"user instruction","observations":["When I say 'memorize', I mean to add it to memory.json."]}
{"type":"entity","name":"user workflow and response preferences","entityType":"user instruction","observations":["Terminal commands should be formatted as clickable bash code blocks.","Automatic execution of commands via tools is acceptable.","When I say 'sync changes' I want a git workflow where the git commands add, commit, and push are proposed individually for approval and execution, as clickable bash code blocks. To recap: When the user says 'Sync changes,' perform the full git status, add all staged/unstaged tracked changes, commit with a generated message (or prompt for one if needed), and push sequence.","Always preserve image aspect ratios.","Provide detailed explanations for steps.","Evaluate user requests against good practices & Inform the user if a request goes against good practices and suggest alternatives.","Always use Context7 tools for current documentation on libraries/frameworks before implementation or discussion.","When a Taskmaster plan involves making a change, explicitly include one or more verification steps for that change.","Prioritize factual accuracy over creativity.","Cross-reference information with multiple sources before presenting as fact.","Clearly state when information is speculative or inferred.","Avoid making assumptions or filling in gaps with unverified details.","Focus on information directly present in provided context or established knowledge.","If evidence is weak or contradictory, point this out.","Prefer to state 'I don’t know' over providing a potentially incorrect answer.","Break down complex queries into smaller, manageable parts.","DO NOT add extra features or style elements that weren’t explicitly requested.","Focus only on implementing exactly what was asked for, nothing more.","If uncertain about a requirement, ask for clarification rather than guessing.","if github is needed, use the gh cli tool."]}
{"type":"entity","name":"memorize keyword meaning (project-local)","entityType":"user instruction","observations":["When I say 'memorize', I mean to add it to this project's memory.json."]}
{"type":"entity","name":"user workflow and response preferences (project-local)","entityType":"user instruction","observations":["Terminal commands should be formatted as clickable bash code blocks.","Automatic execution of commands via tools is acceptable.","When I say 'sync changes' I want a git workflow where the git commands add, commit, and push are proposed individually for approval and execution, as clickable bash code blocks. To recap: When the user says 'Sync changes,' perform the full git status, add all staged/unstaged tracked changes, commit with a generated message (or prompt for one if needed), and push sequence.","Always preserve image aspect ratios.","Provide detailed explanations for steps.","Evaluate user requests against good practices & Inform the user if a request goes against good practices and suggest alternatives.","Always use Context7 tools for current documentation on libraries/frameworks before implementation or discussion.","When a Taskmaster plan involves making a change, explicitly include one or more verification steps for that change.","Prioritize factual accuracy over creativity.","Cross-reference information with multiple sources before presenting as fact.","Clearly state when information is speculative or inferred.","Avoid making assumptions or filling in gaps with unverified details.","Focus on information directly present in provided context or established knowledge.","If evidence is weak or contradictory, point this out.","Prefer to state 'I don’t know' over providing a potentially incorrect answer.","Break down complex queries into smaller, manageable parts.","DO NOT add extra features or style elements that weren’t explicitly requested.","Focus only on implementing exactly what was asked for, nothing more.","If uncertain about a requirement, ask for clarification rather than guessing.","if github is needed, use the gh cli tool."]}